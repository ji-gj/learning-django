개발을 시작합니다
==============

장고 프로젝트를 시작합니다
---------------------

###장고 버전
파이썬 버전은 2.7.3을 사용한다.

	$ python --version
	Python 2.7.3

장고 버전은 1.4를 사용한다.

	$ django-admin.py --version
	1.4

###장고 프로젝트 만들기
"django_bookmarks"라는 이름으로 첫 번째 장고 프로젝트를 만든다.

	$ django-admin.py startproject django_bookmarks

위 명령을 실행하면 아래와 같은 구조로 파일과 디렉토리가 생성된다.

	django_bookmarks/
	├── django_bookmarks
	│   ├── __init__.py
	│   ├── settings.py
	│   ├── urls.py
	│   └── wsgi.py
	└── manage.py

###데이터베이스 구성
settings.py를 열어서 DATABASES 항목을 아래와 같은 내용으로 수정한다. 애플리케이션에서 사용할 데이터베이스로 sqlite3를 지정했다.

	DATABASES = {
	    'default': {
	        'ENGINE': 'django.db.backends.sqlite3',
	        'NAME': 'bookmarksdb.sqlite3',
	        'USER': '',
	        'PASSWORD': '',
	        'HOST': '',
	        'PORT': '',
	    }
	}

다음으로 syncdb를 한다. syncdb를 수행함으로써 settings.py에서 정의한 장고 앱에 필요한 테이블과 데이터를 생성한다. 테이블 생성 후 superusers를 만들 것인 지 여부를 물어 본다. 아래에서는 yes를 입력하여  Username은 'admin'을 E-mail은 'admin@example.com'로 하는 계정을 만들었다.

	$ python manage.py syncdb
	Creating tables ...
	Creating table auth_permission
	Creating table auth_group_permissions
	Creating table auth_group
	Creating table auth_user_user_permissions
	Creating table auth_user_groups
	Creating table auth_user
	Creating table django_content_type
	Creating table django_session
	Creating table django_site

	You just installed Django's auth system, which means you don't have any superusers defined.
	Would you like to create one now? (yes/no): yes
	Username (leave blank to use 'jin'): admin
	E-mail address: admin@example.com
	Password: 
	Password (again): 
	Superuser created successfully.
	Installing custom SQL ...
	Installing indexes ...
	Installed 0 object(s) from 0 fixture(s)

###개발서버 실행
작성된 애플리케이션의 웹페이지를 확인하고 테스트 할 수 있도록 manage.py의 runserver 명령으로 개발 용 웹서버를 실행할 수 있다.

	$ python manage.py runserver
	Validating models...

	0 errors found
	Django version 1.4, using settings 'django_bookmarks.settings'
	Development server is running at http://127.0.0.1:8000/
	Quit the server with CONTROL-C.

웹 브라우저의 주소창에 아래 주소를 입력하고 페이지를 요청한다.

	http://localhost:8000/

페이지의 내용으로 장고가 기본으로 제공하는 페이지가 출력된다.

	It worked!
	Congratulations on your first Django-powered page.
	Of course, you haven't actually done any work yet. Here's what to do next:
	...

터미널에서 개발 웹서버로 요청이 한 건 왔음을 알리는 출력메시지를 확인할 수 있다.

	[10/Jul/2012 17:09:21] "GET / HTTP/1.1" 200 1967

ctrl+c 키를 입력하여 웹서버를 멈출 수 있다.

###git 구성하기
앞으로 실습을 더 진행하기 전에 git로 버전 관리를 하도록 구성하자.

####git 저장소 만들기
manage.py가 설치되어 있는 디렉터리에서 아래 명령으로 git 저장소를 만든다.

	$ git init
	Initialized empty Git repository in /home/jin/learning_django/django_bookmarks/.git/

####.gitignore 작성: 버전관리에서 제외하기
버전관리가 필요치 않은 파일이나 디렉터리는 .gitignore를 작성하여 내용을 명시한다. 이런 파일의 예로는 임시파일, 로그 디렉터리, 에디터의 백업 파일, 에디터의 스왑파일 등 이 있다.

	# See http://help.github.com/ignore-files/ for more about ignoring files.
	#
	# If you find yourself ignoring temporary files generated by your text editor
	# or operating system, you probably want to add a global ignore instead:
	#   git config --global core.excludesfile ~/.gitignore_global

	# python byte code
	*.py[co]

	# Packages
	*.egg
	*.egg-info
	dist
	build
	eggs
	parts
	bin
	var
	sdist
	develop-eggs
	.installed.cfg

	# Installer logs
	pip-log.txt

	# Unit test / coverage reports
	.coverage
	.tox

	#Translations
	*.mo

	#Mr Developer
	.mr.developer.cfg

	# Ignore the default SQLite database.
	*.sqlite3

	# markdown html
	/notes/*.html

	# Ignore other unneeded files.
	*.swp
	*~
	.project
	.DS_Store
	.idea

####버전관리에 추가 할 파일 확인
git status 명령으로 스테이징할 파일 혹은 커밋할 파일을 확인한다.

	$ git status
	# On branch master
	#
	# Initial commit
	#
	# Untracked files:
	#   (use "git add <file>..." to include in what will be committed)
	#
	#	.gitignore
	#	django_bookmarks/
	#	manage.py
	#	notes/

####버전관리를 위해 스테이징하기
git add를 실행하여 파일을 스테이징한다.

	$ git add .
	$ git status
	# On branch master
	#
	# Initial commit
	#
	# Changes to be committed:
	#   (use "git rm --cached <file>..." to unstage)
	#
	#	new file:   .gitignore
	#	new file:   django_bookmarks/__init__.py
	#	new file:   django_bookmarks/__init__.pyc
	#	new file:   django_bookmarks/settings.py
	#	new file:   django_bookmarks/settings.pyc
	#	new file:   django_bookmarks/urls.py
	#	new file:   django_bookmarks/urls.pyc
	#	new file:   django_bookmarks/wsgi.py
	#	new file:   django_bookmarks/wsgi.pyc
	#	new file:   manage.py
	#	new file:   notes/start_creating_app.markdown
	#

####커밋하기
commit 명령으로 커밋을 수행한다. -m으로 커밋 메시지를 작성성한다.

	$ git commit -m "Initial commit"
	[master (root-commit) 98b384b] Initial commit
	 10 files changed, 673 insertions(+)
	 create mode 100644 .gitignore
	 create mode 100644 django_bookmarks/__init__.py
	 create mode 100644 django_bookmarks/__init__.pyc
	 create mode 100644 django_bookmarks/settings.py
	 create mode 100644 django_bookmarks/settings.pyc
	 create mode 100644 django_bookmarks/urls.py
	 create mode 100644 django_bookmarks/urls.pyc
	 create mode 100644 django_bookmarks/wsgi.py
	 create mode 100644 django_bookmarks/wsgi.pyc
	 create mode 100644 manage.py
	 create mode 100644 notes/start_creating_app.markdown

####git log
git log명령으로 커밋한 내역을 확인할 수 있다.

	$ git log
	commit 98b384b48d507e76beaf0c442200666670d1c721
	Author: onmoving <onmoving@asanatree.com>
	Date:   Wed Jul 11 07:57:27 2012 +0900

	    Initial commit

####git branch
git branch명령으로 브랜치를 확인할 수 있다. 최초에 커밋을 하면 기본적으로 master브랜치가 생성이 된다. master브랜치 이름앞에 *기호는 현재 브랜치를 의미한다.

	$ git branch
	* master

###태그 만들기

현재의 소스코드 구조에 태그를 부여하자. tag 명령으로 태그를 생성한다. 아래 명령은 eof-creating-app를 이름으로 하는 태그를 생성한다.

	$ git tag eof-creating-app

태그의 리스트를 확인하기 위해서는 옵션 없이 tag 명령만 수행하거나 -l 옵션을 사용한다. 

	$ git tag -l

####github에 원격저장소 만들기

지금 까지 실습한 내용을 git 원격저장소에 올리고 공유하고 싶다면 github를 이용할 수 있다.
github에 가입한 후 원격저장소를 만든다.
원격저장소의 이름은 "learning-django"로 한다.

####github에 push하기
remote add 명령으로 원격저장소의 별칭을 추가 한다. origin은 원격저장소의 별칭이 된다. username은 github의 계정명을 사용한다.

	$ git remote add origin https://github.com/username/learning-django.git
	# Creates a remote named "origin" pointing at your GitHub repo

이제 원격 저장소에 push를 수행하여 로컬의 내용을 github로 올릴 수 있다.

	$ git push -u origin master
	# Sends your commits in the "master" branch to GitHub

처음 푸쉬 이 후에 추가 commit한 내용을 다시 푸쉬해야 하는 경우에는 remote명령은 수행 할 필요없이

	$ git push origin master

하거나 master 브랜치를 push하는 거라면 짧게
	
	$ git push

한다.

####원격 저장소에 태그 푸시하기

푸시할 때 브랜치명 대신 태그명을 명시하면 태그를 원격저장소에 푸시할 수 있다. eof-creating-app 태그를 푸시하려면 아래와 같이 수행한다.

	$ git push origin eof-creating-app
	To https://github.com/onmoving/learning-django.git
	 * [new tag]         eof-creating-app -> eof-creating-app

혹은 모든 로컬태그를 한꺼번에 올리려면 --tags 옵션을 이용할 수 있다.

	$ git  push --tags

###기타 git 명령


####github로부터 clone하기
clone은 저장소의 내용을 복제하고자 할 때 사용한다. github의 learning-django 원격저장소의 내용을 복제하고자 할 때 아래 명령을 사용한다.

	git clone https://github.com/username/learning-django.git

####github로부터 pull하기
원격 저장소의 변경된 내용을 가져와서 로컬저장소의 내용과 병합하고자 할 경우 pull명령을 사용한다.

	$ git pull origin master

혹은 현재 브랜치가 master이면 짧게

	$ git pull

한다.

####브랜칭(Branch)

아래 명령은 creating-app 이라는 브랜치를 만들고 이 브랜치로 전환하다. git의 저장소(repo)를 만들면 처음부터 자동으로 master 브랜치를 만들어서 사용한다. -b 옵션을 붙이면 브랜치를 만들고 새로 만든 브랜치로 전환하게 된다.

	$ git checkout -b creating-app
	Switched to a new branch 'creating-app'

branch 명령을 이용하면 현재 branch의 목록을 볼 수있다. 브랜치 이름 앞에 별표(*) 문자가 현재 사용 중이 브랜치를 의미한다.

	$ git branch
	  master
	* creating-app

###브랜치에서 내용 수정
이제 새로 만든 creating-app 브랜치에서 내용을 수정하더라도 master브랜치에는 영향이 없다.
수정 작업을 마치면 commit을 한다.

###병합(Merge)
변경내용을 master 브랜치에 병합하고자 하는 경우 merge명령을 사용한다. merge명령을 사용할 때 유의해야 할 것은 병합 대상이 되는 master 브랜치로 먼저 전환한 후 병합해야 한다.

	$ git checkout master
	Switched to branch 'master'
	$ git merge creating-app
	Updating 5b5631a..610b4c0
	Fast-forward
	 django_bookmarks/settings.py      |   12 +-
	 notes/start_creating_app.markdown |  316 +++++++++++++++++++++++++++++++++++++
	 2 files changed, 322 insertions(+), 6 deletions(-)
	 create mode 100644 notes/start_creating_app.markdown

###브랜치의 삭제
브랜치를 병합한 후에는 브랜치를 계속 둘지 삭제할 지 여부는 프로젝트의 상황에 따라서 달라진다. 태그(tag)를 만들면 태그를 붙였던 상태로 되돌아 갈 수 있으므로 병합한 브랜치는 삭제해도 무방하다. branch명령에 `-d` 옵션을 사용하면 병합된 브랜치를 삭제할 수 있다. 이 때에도 삭제하려는 creating-app 브랜치가 아닌 다른 브랜치(예:master)가 현재 브랜치여야 한다.

	$ git branch -d creating-app
	Deleted branch creating-app (was d856f11).

###병합하지 않은 브랜치를 강제로 삭제하기
`-D` 옵션을 사용하면 병합하지 않은 브랜치로 삭제할 수 있다. 브랜치의 수정내용을 병합하지 않고 버리고자 하면 사용할 수 있는 방법이다.

	$ git branch -D topic-branch

###다시 푸쉬하기
추가된 commit이 생겨서 원격저장소에 다시 푸시할 때에는 `git remote`를 통해 origin이라는 원격저장소의 별칭을 이미 가지고 있으므로

	$ git push origin master

하거나 master 브랜치를 push하는 거라면 짧게

	$ git push

하면 된다.

###태그 삭제하기

로컬태그의 삭제는 tag -d 옵션을 이용한다.

	$ git tag -d eof-creating-app

###원격저장소의 태그 삭제하기

원격 저장소의 태그는 아래와 같이 태그이름 앞에 :tags/를 붙인다.

	$ git push origin :tags/remote-tag-name
